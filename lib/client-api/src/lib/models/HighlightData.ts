/* tslint:disable */
/* eslint-disable */
/**
 * InkStain
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { HighlightDataAreasInner } from './HighlightDataAreasInner';
import {
  HighlightDataAreasInnerFromJSON,
  HighlightDataAreasInnerFromJSONTyped,
  HighlightDataAreasInnerToJSON,
} from './HighlightDataAreasInner';

/**
 *
 * @export
 * @interface HighlightData
 */
export interface HighlightData {
  /**
   *
   * @type {string}
   * @memberof HighlightData
   */
  type: HighlightDataTypeEnum;
  /**
   *
   * @type {string}
   * @memberof HighlightData
   */
  fill: string;
  /**
   *
   * @type {Array<HighlightDataAreasInner>}
   * @memberof HighlightData
   */
  areas: Array<HighlightDataAreasInner>;
}

/**
 * @export
 */
export const HighlightDataTypeEnum = {
  Highlight: 'highlight',
} as const;
export type HighlightDataTypeEnum =
  (typeof HighlightDataTypeEnum)[keyof typeof HighlightDataTypeEnum];

/**
 * Check if a given object implements the HighlightData interface.
 */
export function instanceOfHighlightData(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'type' in value;
  isInstance = isInstance && 'fill' in value;
  isInstance = isInstance && 'areas' in value;

  return isInstance;
}

export function HighlightDataFromJSON(json: any): HighlightData {
  return HighlightDataFromJSONTyped(json, false);
}

export function HighlightDataFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): HighlightData {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    type: json['type'],
    fill: json['fill'],
    areas: (json['areas'] as Array<any>).map(HighlightDataAreasInnerFromJSON),
  };
}

export function HighlightDataToJSON(value?: HighlightData | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    type: value.type,
    fill: value.fill,
    areas: (value.areas as Array<any>).map(HighlightDataAreasInnerToJSON),
  };
}
