/* tslint:disable */
/* eslint-disable */
/**
 * InkStain
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface DocumentListItem
 */
export interface DocumentListItem {
  /**
   * The name of the file or folder.
   * @type {string}
   * @memberof DocumentListItem
   */
  name: string;
  /**
   * The type of the item (file or folder).
   * @type {string}
   * @memberof DocumentListItem
   */
  type: DocumentListItemTypeEnum;
  /**
   * The full path of the file or folder.
   * @type {string}
   * @memberof DocumentListItem
   */
  path: string;
}

/**
 * @export
 */
export const DocumentListItemTypeEnum = {
  File: 'file',
  Folder: 'folder',
} as const;
export type DocumentListItemTypeEnum =
  (typeof DocumentListItemTypeEnum)[keyof typeof DocumentListItemTypeEnum];

/**
 * Check if a given object implements the DocumentListItem interface.
 */
export function instanceOfDocumentListItem(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'name' in value;
  isInstance = isInstance && 'type' in value;
  isInstance = isInstance && 'path' in value;

  return isInstance;
}

export function DocumentListItemFromJSON(json: any): DocumentListItem {
  return DocumentListItemFromJSONTyped(json, false);
}

export function DocumentListItemFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): DocumentListItem {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    type: json['type'],
    path: json['path'],
  };
}

export function DocumentListItemToJSON(value?: DocumentListItem | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    type: value.type,
    path: value.path,
  };
}
