/* tslint:disable */
/* eslint-disable */
/**
 * InkStain
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface ImportDocumentRequest
 */
export interface ImportDocumentRequest {
  /**
   * Local file path of the document to import
   * @type {string}
   * @memberof ImportDocumentRequest
   */
  localFilePath: string;
  /**
   * Target path within the space to import the document
   * @type {string}
   * @memberof ImportDocumentRequest
   */
  targetPath: string;
  /**
   * MIME type of the document to import
   * @type {string}
   * @memberof ImportDocumentRequest
   */
  mimeType: string;
}

/**
 * Check if a given object implements the ImportDocumentRequest interface.
 */
export function instanceOfImportDocumentRequest(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'localFilePath' in value;
  isInstance = isInstance && 'targetPath' in value;
  isInstance = isInstance && 'mimeType' in value;

  return isInstance;
}

export function ImportDocumentRequestFromJSON(
  json: any
): ImportDocumentRequest {
  return ImportDocumentRequestFromJSONTyped(json, false);
}

export function ImportDocumentRequestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ImportDocumentRequest {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    localFilePath: json['localFilePath'],
    targetPath: json['targetPath'],
    mimeType: json['mimeType'],
  };
}

export function ImportDocumentRequestToJSON(
  value?: ImportDocumentRequest | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    localFilePath: value.localFilePath,
    targetPath: value.targetPath,
    mimeType: value.mimeType,
  };
}
