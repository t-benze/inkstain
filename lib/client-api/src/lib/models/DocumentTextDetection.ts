/* tslint:disable */
/* eslint-disable */
/**
 * InkStain
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DocumentTextDetectionBlocksInner } from './DocumentTextDetectionBlocksInner';
import {
  DocumentTextDetectionBlocksInnerFromJSON,
  DocumentTextDetectionBlocksInnerFromJSONTyped,
  DocumentTextDetectionBlocksInnerToJSON,
} from './DocumentTextDetectionBlocksInner';
import type { DocumentTextDetectionDocumentMetadata } from './DocumentTextDetectionDocumentMetadata';
import {
  DocumentTextDetectionDocumentMetadataFromJSON,
  DocumentTextDetectionDocumentMetadataFromJSONTyped,
  DocumentTextDetectionDocumentMetadataToJSON,
} from './DocumentTextDetectionDocumentMetadata';

/**
 *
 * @export
 * @interface DocumentTextDetection
 */
export interface DocumentTextDetection {
  /**
   *
   * @type {Array<DocumentTextDetectionBlocksInner>}
   * @memberof DocumentTextDetection
   */
  blocks?: Array<DocumentTextDetectionBlocksInner>;
  /**
   *
   * @type {string}
   * @memberof DocumentTextDetection
   */
  detectDocumentTextModelVersion?: string;
  /**
   *
   * @type {DocumentTextDetectionDocumentMetadata}
   * @memberof DocumentTextDetection
   */
  documentMetadata?: DocumentTextDetectionDocumentMetadata;
}

/**
 * Check if a given object implements the DocumentTextDetection interface.
 */
export function instanceOfDocumentTextDetection(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function DocumentTextDetectionFromJSON(
  json: any
): DocumentTextDetection {
  return DocumentTextDetectionFromJSONTyped(json, false);
}

export function DocumentTextDetectionFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): DocumentTextDetection {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    blocks: !exists(json, 'Blocks')
      ? undefined
      : (json['Blocks'] as Array<any>).map(
          DocumentTextDetectionBlocksInnerFromJSON
        ),
    detectDocumentTextModelVersion: !exists(
      json,
      'DetectDocumentTextModelVersion'
    )
      ? undefined
      : json['DetectDocumentTextModelVersion'],
    documentMetadata: !exists(json, 'DocumentMetadata')
      ? undefined
      : DocumentTextDetectionDocumentMetadataFromJSON(json['DocumentMetadata']),
  };
}

export function DocumentTextDetectionToJSON(
  value?: DocumentTextDetection | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    Blocks:
      value.blocks === undefined
        ? undefined
        : (value.blocks as Array<any>).map(
            DocumentTextDetectionBlocksInnerToJSON
          ),
    DetectDocumentTextModelVersion: value.detectDocumentTextModelVersion,
    DocumentMetadata: DocumentTextDetectionDocumentMetadataToJSON(
      value.documentMetadata
    ),
  };
}
