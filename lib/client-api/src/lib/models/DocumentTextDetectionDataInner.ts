/* tslint:disable */
/* eslint-disable */
/**
 * InkStain
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DocumentTextDetectionDataInnerGeometry } from './DocumentTextDetectionDataInnerGeometry';
import {
  DocumentTextDetectionDataInnerGeometryFromJSON,
  DocumentTextDetectionDataInnerGeometryFromJSONTyped,
  DocumentTextDetectionDataInnerGeometryToJSON,
} from './DocumentTextDetectionDataInnerGeometry';
import type { DocumentTextDetectionDataInnerQuery } from './DocumentTextDetectionDataInnerQuery';
import {
  DocumentTextDetectionDataInnerQueryFromJSON,
  DocumentTextDetectionDataInnerQueryFromJSONTyped,
  DocumentTextDetectionDataInnerQueryToJSON,
} from './DocumentTextDetectionDataInnerQuery';
import type { DocumentTextDetectionDataInnerRelationshipsInner } from './DocumentTextDetectionDataInnerRelationshipsInner';
import {
  DocumentTextDetectionDataInnerRelationshipsInnerFromJSON,
  DocumentTextDetectionDataInnerRelationshipsInnerFromJSONTyped,
  DocumentTextDetectionDataInnerRelationshipsInnerToJSON,
} from './DocumentTextDetectionDataInnerRelationshipsInner';

/**
 *
 * @export
 * @interface DocumentTextDetectionDataInner
 */
export interface DocumentTextDetectionDataInner {
  /**
   *
   * @type {string}
   * @memberof DocumentTextDetectionDataInner
   */
  blockType?: string;
  /**
   *
   * @type {number}
   * @memberof DocumentTextDetectionDataInner
   */
  columnIndex?: number;
  /**
   *
   * @type {number}
   * @memberof DocumentTextDetectionDataInner
   */
  columnSpan?: number;
  /**
   *
   * @type {number}
   * @memberof DocumentTextDetectionDataInner
   */
  confidence?: number;
  /**
   *
   * @type {Array<string>}
   * @memberof DocumentTextDetectionDataInner
   */
  entityTypes?: Array<string>;
  /**
   *
   * @type {DocumentTextDetectionDataInnerGeometry}
   * @memberof DocumentTextDetectionDataInner
   */
  geometry?: DocumentTextDetectionDataInnerGeometry;
  /**
   *
   * @type {string}
   * @memberof DocumentTextDetectionDataInner
   */
  id?: string;
  /**
   *
   * @type {number}
   * @memberof DocumentTextDetectionDataInner
   */
  page?: number;
  /**
   *
   * @type {DocumentTextDetectionDataInnerQuery}
   * @memberof DocumentTextDetectionDataInner
   */
  query?: DocumentTextDetectionDataInnerQuery;
  /**
   *
   * @type {Array<DocumentTextDetectionDataInnerRelationshipsInner>}
   * @memberof DocumentTextDetectionDataInner
   */
  relationships?: Array<DocumentTextDetectionDataInnerRelationshipsInner>;
  /**
   *
   * @type {number}
   * @memberof DocumentTextDetectionDataInner
   */
  rowIndex?: number;
  /**
   *
   * @type {number}
   * @memberof DocumentTextDetectionDataInner
   */
  rowSpan?: number;
  /**
   *
   * @type {string}
   * @memberof DocumentTextDetectionDataInner
   */
  selectionStatus?: string;
  /**
   *
   * @type {string}
   * @memberof DocumentTextDetectionDataInner
   */
  text?: string;
  /**
   *
   * @type {string}
   * @memberof DocumentTextDetectionDataInner
   */
  textType?: string;
}

/**
 * Check if a given object implements the DocumentTextDetectionDataInner interface.
 */
export function instanceOfDocumentTextDetectionDataInner(
  value: object
): boolean {
  let isInstance = true;

  return isInstance;
}

export function DocumentTextDetectionDataInnerFromJSON(
  json: any
): DocumentTextDetectionDataInner {
  return DocumentTextDetectionDataInnerFromJSONTyped(json, false);
}

export function DocumentTextDetectionDataInnerFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): DocumentTextDetectionDataInner {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    blockType: !exists(json, 'BlockType') ? undefined : json['BlockType'],
    columnIndex: !exists(json, 'ColumnIndex') ? undefined : json['ColumnIndex'],
    columnSpan: !exists(json, 'ColumnSpan') ? undefined : json['ColumnSpan'],
    confidence: !exists(json, 'Confidence') ? undefined : json['Confidence'],
    entityTypes: !exists(json, 'EntityTypes') ? undefined : json['EntityTypes'],
    geometry: !exists(json, 'Geometry')
      ? undefined
      : DocumentTextDetectionDataInnerGeometryFromJSON(json['Geometry']),
    id: !exists(json, 'Id') ? undefined : json['Id'],
    page: !exists(json, 'Page') ? undefined : json['Page'],
    query: !exists(json, 'Query')
      ? undefined
      : DocumentTextDetectionDataInnerQueryFromJSON(json['Query']),
    relationships: !exists(json, 'Relationships')
      ? undefined
      : (json['Relationships'] as Array<any>).map(
          DocumentTextDetectionDataInnerRelationshipsInnerFromJSON
        ),
    rowIndex: !exists(json, 'RowIndex') ? undefined : json['RowIndex'],
    rowSpan: !exists(json, 'RowSpan') ? undefined : json['RowSpan'],
    selectionStatus: !exists(json, 'SelectionStatus')
      ? undefined
      : json['SelectionStatus'],
    text: !exists(json, 'Text') ? undefined : json['Text'],
    textType: !exists(json, 'TextType') ? undefined : json['TextType'],
  };
}

export function DocumentTextDetectionDataInnerToJSON(
  value?: DocumentTextDetectionDataInner | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    BlockType: value.blockType,
    ColumnIndex: value.columnIndex,
    ColumnSpan: value.columnSpan,
    Confidence: value.confidence,
    EntityTypes: value.entityTypes,
    Geometry: DocumentTextDetectionDataInnerGeometryToJSON(value.geometry),
    Id: value.id,
    Page: value.page,
    Query: DocumentTextDetectionDataInnerQueryToJSON(value.query),
    Relationships:
      value.relationships === undefined
        ? undefined
        : (value.relationships as Array<any>).map(
            DocumentTextDetectionDataInnerRelationshipsInnerToJSON
          ),
    RowIndex: value.rowIndex,
    RowSpan: value.rowSpan,
    SelectionStatus: value.selectionStatus,
    Text: value.text,
    TextType: value.textType,
  };
}
