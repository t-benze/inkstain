/* tslint:disable */
/* eslint-disable */
/**
 * InkStain
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DocumentMetaAttributesValue } from './DocumentMetaAttributesValue';
import {
  DocumentMetaAttributesValueFromJSON,
  DocumentMetaAttributesValueFromJSONTyped,
  DocumentMetaAttributesValueToJSON,
} from './DocumentMetaAttributesValue';

/**
 *
 * @export
 * @interface DocumentMeta
 */
export interface DocumentMeta {
  /**
   *
   * @type {string}
   * @memberof DocumentMeta
   */
  mimetype: string;
  /**
   *
   * @type {Array<string>}
   * @memberof DocumentMeta
   */
  tags?: Array<string>;
  /**
   *
   * @type {{ [key: string]: DocumentMetaAttributesValue; }}
   * @memberof DocumentMeta
   */
  attributes?: { [key: string]: DocumentMetaAttributesValue };
}

/**
 * Check if a given object implements the DocumentMeta interface.
 */
export function instanceOfDocumentMeta(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'mimetype' in value;

  return isInstance;
}

export function DocumentMetaFromJSON(json: any): DocumentMeta {
  return DocumentMetaFromJSONTyped(json, false);
}

export function DocumentMetaFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): DocumentMeta {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    mimetype: json['mimetype'],
    tags: !exists(json, 'tags') ? undefined : json['tags'],
    attributes: !exists(json, 'attributes')
      ? undefined
      : mapValues(json['attributes'], DocumentMetaAttributesValueFromJSON),
  };
}

export function DocumentMetaToJSON(value?: DocumentMeta | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    mimetype: value.mimetype,
    tags: value.tags,
    attributes:
      value.attributes === undefined
        ? undefined
        : mapValues(value.attributes, DocumentMetaAttributesValueToJSON),
  };
}
