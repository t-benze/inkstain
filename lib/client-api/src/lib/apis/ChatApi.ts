/* tslint:disable */
/* eslint-disable */
/**
 * InkStain
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  ChatMessage,
  ChatNewMessageRequest,
  ChatNewSession200Response,
  ChatNewSessionRequest,
  GetChatSession200Response,
} from '../models/index';
import {
  ChatMessageFromJSON,
  ChatMessageToJSON,
  ChatNewMessageRequestFromJSON,
  ChatNewMessageRequestToJSON,
  ChatNewSession200ResponseFromJSON,
  ChatNewSession200ResponseToJSON,
  ChatNewSessionRequestFromJSON,
  ChatNewSessionRequestToJSON,
  GetChatSession200ResponseFromJSON,
  GetChatSession200ResponseToJSON,
} from '../models/index';

export interface ChatNewMessageOperationRequest {
  spaceKey: string;
  path: string;
  chatNewMessageRequest: ChatNewMessageRequest;
}

export interface ChatNewSessionOperationRequest {
  spaceKey: string;
  path: string;
  chatNewSessionRequest: ChatNewSessionRequest;
  withDocument?: string;
}

export interface GetChatSessionRequest {
  spaceKey: string;
  sessionId: string;
  path: string;
}

export interface GetSessionListRequest {
  spaceKey: string;
  path: string;
}

/**
 *
 */
export class ChatApi extends runtime.BaseAPI {
  /**
   * Send a new chat message and get AI response
   */
  async chatNewMessageRaw(
    requestParameters: ChatNewMessageOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChatMessage>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling chatNewMessage.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling chatNewMessage.'
      );
    }

    if (
      requestParameters.chatNewMessageRequest === null ||
      requestParameters.chatNewMessageRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'chatNewMessageRequest',
        'Required parameter requestParameters.chatNewMessageRequest was null or undefined when calling chatNewMessage.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/chat/{spaceKey}/message`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ChatNewMessageRequestToJSON(
          requestParameters.chatNewMessageRequest
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChatMessageFromJSON(jsonValue)
    );
  }

  /**
   * Send a new chat message and get AI response
   */
  async chatNewMessage(
    requestParameters: ChatNewMessageOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChatMessage> {
    const response = await this.chatNewMessageRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * initiate a chat session and handle user query
   */
  async chatNewSessionRaw(
    requestParameters: ChatNewSessionOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<ChatNewSession200Response>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling chatNewSession.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling chatNewSession.'
      );
    }

    if (
      requestParameters.chatNewSessionRequest === null ||
      requestParameters.chatNewSessionRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'chatNewSessionRequest',
        'Required parameter requestParameters.chatNewSessionRequest was null or undefined when calling chatNewSession.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    if (requestParameters.withDocument !== undefined) {
      queryParameters['withDocument'] = requestParameters.withDocument;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/chat/{spaceKey}/session`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ChatNewSessionRequestToJSON(
          requestParameters.chatNewSessionRequest
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ChatNewSession200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * initiate a chat session and handle user query
   */
  async chatNewSession(
    requestParameters: ChatNewSessionOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<ChatNewSession200Response> {
    const response = await this.chatNewSessionRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get chat session details
   */
  async getChatSessionRaw(
    requestParameters: GetChatSessionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GetChatSession200Response>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling getChatSession.'
      );
    }

    if (
      requestParameters.sessionId === null ||
      requestParameters.sessionId === undefined
    ) {
      throw new runtime.RequiredError(
        'sessionId',
        'Required parameter requestParameters.sessionId was null or undefined when calling getChatSession.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling getChatSession.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.sessionId !== undefined) {
      queryParameters['sessionId'] = requestParameters.sessionId;
    }

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/chat/{spaceKey}/session`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GetChatSession200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Get chat session details
   */
  async getChatSession(
    requestParameters: GetChatSessionRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GetChatSession200Response> {
    const response = await this.getChatSessionRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Get list of chat sessions
   */
  async getSessionListRaw(
    requestParameters: GetSessionListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<string>>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling getSessionList.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling getSessionList.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/chat/{spaceKey}/sessions`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Get list of chat sessions
   */
  async getSessionList(
    requestParameters: GetSessionListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<string>> {
    const response = await this.getSessionListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
