/* tslint:disable */
/* eslint-disable */
/**
 * InkStain
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { DocumentsSpaceKeyListGet200ResponseInner } from '../models/index';
import {
  DocumentsSpaceKeyListGet200ResponseInnerFromJSON,
  DocumentsSpaceKeyListGet200ResponseInnerToJSON,
} from '../models/index';

export interface DocumentsSpaceKeyAddFolderPostRequest {
  spaceKey: string;
  path: string;
}

export interface DocumentsSpaceKeyAddPostRequest {
  spaceKey: string;
  path: string;
  document: Blob;
}

export interface DocumentsSpaceKeyContentGetRequest {
  spaceKey: string;
  path: string;
}

export interface DocumentsSpaceKeyDeleteDeleteRequest {
  spaceKey: string;
  path: string;
}

export interface DocumentsSpaceKeyDeleteFolderDeleteRequest {
  spaceKey: string;
  path: string;
}

export interface DocumentsSpaceKeyListGetRequest {
  spaceKey: string;
  path: string;
}

/**
 *
 */
export class DocumentsApi extends runtime.BaseAPI {
  /**
   * Add a new folder within a space
   */
  async documentsSpaceKeyAddFolderPostRaw(
    requestParameters: DocumentsSpaceKeyAddFolderPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling documentsSpaceKeyAddFolderPost.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling documentsSpaceKeyAddFolderPost.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/addFolder`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Add a new folder within a space
   */
  async documentsSpaceKeyAddFolderPost(
    requestParameters: DocumentsSpaceKeyAddFolderPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.documentsSpaceKeyAddFolderPostRaw(
      requestParameters,
      initOverrides
    );
  }

  /**
   * Add a new document to a space
   */
  async documentsSpaceKeyAddPostRaw(
    requestParameters: DocumentsSpaceKeyAddPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling documentsSpaceKeyAddPost.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling documentsSpaceKeyAddPost.'
      );
    }

    if (
      requestParameters.document === null ||
      requestParameters.document === undefined
    ) {
      throw new runtime.RequiredError(
        'document',
        'Required parameter requestParameters.document was null or undefined when calling documentsSpaceKeyAddPost.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [
      { contentType: 'multipart/form-data' },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters.document !== undefined) {
      formParams.append('document', requestParameters.document as any);
    }

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/add`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Add a new document to a space
   */
  async documentsSpaceKeyAddPost(
    requestParameters: DocumentsSpaceKeyAddPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.documentsSpaceKeyAddPostRaw(requestParameters, initOverrides);
  }

  /**
   * Serve document content from a space
   */
  async documentsSpaceKeyContentGetRaw(
    requestParameters: DocumentsSpaceKeyContentGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling documentsSpaceKeyContentGet.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling documentsSpaceKeyContentGet.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/content`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Serve document content from a space
   */
  async documentsSpaceKeyContentGet(
    requestParameters: DocumentsSpaceKeyContentGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.documentsSpaceKeyContentGetRaw(requestParameters, initOverrides);
  }

  /**
   * Delete a document from a space
   */
  async documentsSpaceKeyDeleteDeleteRaw(
    requestParameters: DocumentsSpaceKeyDeleteDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling documentsSpaceKeyDeleteDelete.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling documentsSpaceKeyDeleteDelete.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/delete`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a document from a space
   */
  async documentsSpaceKeyDeleteDelete(
    requestParameters: DocumentsSpaceKeyDeleteDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.documentsSpaceKeyDeleteDeleteRaw(
      requestParameters,
      initOverrides
    );
  }

  /**
   * Delete a folder within a space
   */
  async documentsSpaceKeyDeleteFolderDeleteRaw(
    requestParameters: DocumentsSpaceKeyDeleteFolderDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling documentsSpaceKeyDeleteFolderDelete.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling documentsSpaceKeyDeleteFolderDelete.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/deleteFolder`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a folder within a space
   */
  async documentsSpaceKeyDeleteFolderDelete(
    requestParameters: DocumentsSpaceKeyDeleteFolderDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.documentsSpaceKeyDeleteFolderDeleteRaw(
      requestParameters,
      initOverrides
    );
  }

  /**
   * List all documents within a space or sub-folder
   */
  async documentsSpaceKeyListGetRaw(
    requestParameters: DocumentsSpaceKeyListGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<Array<DocumentsSpaceKeyListGet200ResponseInner>>
  > {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling documentsSpaceKeyListGet.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling documentsSpaceKeyListGet.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/list`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(DocumentsSpaceKeyListGet200ResponseInnerFromJSON)
    );
  }

  /**
   * List all documents within a space or sub-folder
   */
  async documentsSpaceKeyListGet(
    requestParameters: DocumentsSpaceKeyListGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<DocumentsSpaceKeyListGet200ResponseInner>> {
    const response = await this.documentsSpaceKeyListGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
