/* tslint:disable */
/* eslint-disable */
/**
 * InkStain
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';

export interface DocumentsSpaceNameContentPathGetRequest {
  spaceName: string;
  path: string;
}

export interface DocumentsSpaceNameListPathGetRequest {
  spaceName: string;
  path: string;
}

/**
 *
 */
export class DocumentsApi extends runtime.BaseAPI {
  /**
   * Serve document content from a space
   */
  async documentsSpaceNameContentPathGetRaw(
    requestParameters: DocumentsSpaceNameContentPathGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceName === null ||
      requestParameters.spaceName === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceName',
        'Required parameter requestParameters.spaceName was null or undefined when calling documentsSpaceNameContentPathGet.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling documentsSpaceNameContentPathGet.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceName}/content/{path}`
          .replace(
            `{${'spaceName'}}`,
            encodeURIComponent(String(requestParameters.spaceName))
          )
          .replace(
            `{${'path'}}`,
            encodeURIComponent(String(requestParameters.path))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Serve document content from a space
   */
  async documentsSpaceNameContentPathGet(
    requestParameters: DocumentsSpaceNameContentPathGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.documentsSpaceNameContentPathGetRaw(
      requestParameters,
      initOverrides
    );
  }

  /**
   * List all documents within a space or sub-folder
   */
  async documentsSpaceNameListPathGetRaw(
    requestParameters: DocumentsSpaceNameListPathGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceName === null ||
      requestParameters.spaceName === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceName',
        'Required parameter requestParameters.spaceName was null or undefined when calling documentsSpaceNameListPathGet.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling documentsSpaceNameListPathGet.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceName}/list/{path}`
          .replace(
            `{${'spaceName'}}`,
            encodeURIComponent(String(requestParameters.spaceName))
          )
          .replace(
            `{${'path'}}`,
            encodeURIComponent(String(requestParameters.path))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * List all documents within a space or sub-folder
   */
  async documentsSpaceNameListPathGet(
    requestParameters: DocumentsSpaceNameListPathGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.documentsSpaceNameListPathGetRaw(
      requestParameters,
      initOverrides
    );
  }
}
