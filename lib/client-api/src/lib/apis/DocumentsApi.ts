/* tslint:disable */
/* eslint-disable */
/**
 * InkStain
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  AddDocumentTagsRequest,
  AddUpdateDocumentAttributesRequest,
  Annotation,
  ImportDocumentRequest,
  ListDocuments200ResponseInner,
  RemoveDocumentTagsRequest,
} from '../models/index';
import {
  AddDocumentTagsRequestFromJSON,
  AddDocumentTagsRequestToJSON,
  AddUpdateDocumentAttributesRequestFromJSON,
  AddUpdateDocumentAttributesRequestToJSON,
  AnnotationFromJSON,
  AnnotationToJSON,
  ImportDocumentRequestFromJSON,
  ImportDocumentRequestToJSON,
  ListDocuments200ResponseInnerFromJSON,
  ListDocuments200ResponseInnerToJSON,
  RemoveDocumentTagsRequestFromJSON,
  RemoveDocumentTagsRequestToJSON,
} from '../models/index';

export interface AddDocumentRequest {
  spaceKey: string;
  path: string;
  document: Blob;
}

export interface AddDocumentAnnotationRequest {
  spaceKey: string;
  path: string;
  annotation: Annotation;
}

export interface AddDocumentTagsOperationRequest {
  spaceKey: string;
  path: string;
  addDocumentTagsRequest: AddDocumentTagsRequest;
}

export interface AddFolderRequest {
  spaceKey: string;
  path: string;
}

export interface AddUpdateDocumentAttributesOperationRequest {
  spaceKey: string;
  path: string;
  addUpdateDocumentAttributesRequest: AddUpdateDocumentAttributesRequest;
}

export interface DeleteDocumentRequest {
  spaceKey: string;
  path: string;
}

export interface DeleteDocumentAnnotationsRequest {
  spaceKey: string;
  path: string;
  requestBody: Array<string>;
}

export interface DeleteDocumentAttributesRequest {
  spaceKey: string;
  path: string;
  requestBody: Array<string>;
}

export interface DeleteFolderRequest {
  spaceKey: string;
  path: string;
}

export interface ExportDocumentRequest {
  spaceKey: string;
  path: string;
  withData?: string;
}

export interface GetDocumentAnnotationsRequest {
  spaceKey: string;
  path: string;
}

export interface GetDocumentAttributesRequest {
  spaceKey: string;
  path: string;
}

export interface GetDocumentContentRequest {
  spaceKey: string;
  path: string;
}

export interface GetDocumentTagsRequest {
  spaceKey: string;
  path: string;
}

export interface ImportDocumentOperationRequest {
  spaceKey: string;
  importDocumentRequest: ImportDocumentRequest;
}

export interface ListDocumentsRequest {
  spaceKey: string;
  path: string;
  folderOnly?: ListDocumentsFolderOnlyEnum;
}

export interface OpenDocumentWithSystemAppRequest {
  spaceKey: string;
  path: string;
}

export interface RemoveDocumentTagsOperationRequest {
  spaceKey: string;
  path: string;
  removeDocumentTagsRequest: RemoveDocumentTagsRequest;
}

export interface RenameDocumentRequest {
  spaceKey: string;
  path: string;
  newName: string;
}

export interface RenameFolderRequest {
  spaceKey: string;
  path: string;
  newName: string;
}

export interface UpdateDocumentAnnotationRequest {
  spaceKey: string;
  path: string;
  annotation: Annotation;
}

/**
 *
 */
export class DocumentsApi extends runtime.BaseAPI {
  /**
   * Add a new document to a space
   */
  async addDocumentRaw(
    requestParameters: AddDocumentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling addDocument.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling addDocument.'
      );
    }

    if (
      requestParameters.document === null ||
      requestParameters.document === undefined
    ) {
      throw new runtime.RequiredError(
        'document',
        'Required parameter requestParameters.document was null or undefined when calling addDocument.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [
      { contentType: 'multipart/form-data' },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    // use FormData to transmit files using content-type "multipart/form-data"
    useForm = canConsumeForm;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters.document !== undefined) {
      formParams.append('document', requestParameters.document as any);
    }

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/add`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Add a new document to a space
   */
  async addDocument(
    requestParameters: AddDocumentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.addDocumentRaw(requestParameters, initOverrides);
  }

  /**
   * Add annotations of a document in a specific space
   */
  async addDocumentAnnotationRaw(
    requestParameters: AddDocumentAnnotationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Annotation>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling addDocumentAnnotation.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling addDocumentAnnotation.'
      );
    }

    if (
      requestParameters.annotation === null ||
      requestParameters.annotation === undefined
    ) {
      throw new runtime.RequiredError(
        'annotation',
        'Required parameter requestParameters.annotation was null or undefined when calling addDocumentAnnotation.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/annotations`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: AnnotationToJSON(requestParameters.annotation),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      AnnotationFromJSON(jsonValue)
    );
  }

  /**
   * Add annotations of a document in a specific space
   */
  async addDocumentAnnotation(
    requestParameters: AddDocumentAnnotationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Annotation> {
    const response = await this.addDocumentAnnotationRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Add tags to a document in a specific space
   */
  async addDocumentTagsRaw(
    requestParameters: AddDocumentTagsOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling addDocumentTags.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling addDocumentTags.'
      );
    }

    if (
      requestParameters.addDocumentTagsRequest === null ||
      requestParameters.addDocumentTagsRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'addDocumentTagsRequest',
        'Required parameter requestParameters.addDocumentTagsRequest was null or undefined when calling addDocumentTags.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/tags`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: AddDocumentTagsRequestToJSON(
          requestParameters.addDocumentTagsRequest
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Add tags to a document in a specific space
   */
  async addDocumentTags(
    requestParameters: AddDocumentTagsOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.addDocumentTagsRaw(requestParameters, initOverrides);
  }

  /**
   * Add a new folder within a space
   */
  async addFolderRaw(
    requestParameters: AddFolderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling addFolder.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling addFolder.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/addFolder`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Add a new folder within a space
   */
  async addFolder(
    requestParameters: AddFolderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.addFolderRaw(requestParameters, initOverrides);
  }

  /**
   * Add or update attributes of a document in a specific space
   */
  async addUpdateDocumentAttributesRaw(
    requestParameters: AddUpdateDocumentAttributesOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling addUpdateDocumentAttributes.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling addUpdateDocumentAttributes.'
      );
    }

    if (
      requestParameters.addUpdateDocumentAttributesRequest === null ||
      requestParameters.addUpdateDocumentAttributesRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'addUpdateDocumentAttributesRequest',
        'Required parameter requestParameters.addUpdateDocumentAttributesRequest was null or undefined when calling addUpdateDocumentAttributes.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/attributes`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: AddUpdateDocumentAttributesRequestToJSON(
          requestParameters.addUpdateDocumentAttributesRequest
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Add or update attributes of a document in a specific space
   */
  async addUpdateDocumentAttributes(
    requestParameters: AddUpdateDocumentAttributesOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.addUpdateDocumentAttributesRaw(requestParameters, initOverrides);
  }

  /**
   * Delete a document from a space
   */
  async deleteDocumentRaw(
    requestParameters: DeleteDocumentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling deleteDocument.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling deleteDocument.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/delete`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a document from a space
   */
  async deleteDocument(
    requestParameters: DeleteDocumentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteDocumentRaw(requestParameters, initOverrides);
  }

  /**
   * Delete annotations from a document in a specific space
   */
  async deleteDocumentAnnotationsRaw(
    requestParameters: DeleteDocumentAnnotationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling deleteDocumentAnnotations.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling deleteDocumentAnnotations.'
      );
    }

    if (
      requestParameters.requestBody === null ||
      requestParameters.requestBody === undefined
    ) {
      throw new runtime.RequiredError(
        'requestBody',
        'Required parameter requestParameters.requestBody was null or undefined when calling deleteDocumentAnnotations.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/annotations`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.requestBody,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete annotations from a document in a specific space
   */
  async deleteDocumentAnnotations(
    requestParameters: DeleteDocumentAnnotationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteDocumentAnnotationsRaw(requestParameters, initOverrides);
  }

  /**
   * Delete attributes from a document in a specific space
   */
  async deleteDocumentAttributesRaw(
    requestParameters: DeleteDocumentAttributesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling deleteDocumentAttributes.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling deleteDocumentAttributes.'
      );
    }

    if (
      requestParameters.requestBody === null ||
      requestParameters.requestBody === undefined
    ) {
      throw new runtime.RequiredError(
        'requestBody',
        'Required parameter requestParameters.requestBody was null or undefined when calling deleteDocumentAttributes.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/attributes`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: requestParameters.requestBody,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete attributes from a document in a specific space
   */
  async deleteDocumentAttributes(
    requestParameters: DeleteDocumentAttributesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteDocumentAttributesRaw(requestParameters, initOverrides);
  }

  /**
   * Delete a folder within a space
   */
  async deleteFolderRaw(
    requestParameters: DeleteFolderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling deleteFolder.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling deleteFolder.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/deleteFolder`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a folder within a space
   */
  async deleteFolder(
    requestParameters: DeleteFolderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.deleteFolderRaw(requestParameters, initOverrides);
  }

  /**
   * Export a document to a different format
   */
  async exportDocumentRaw(
    requestParameters: ExportDocumentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Blob>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling exportDocument.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling exportDocument.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    if (requestParameters.withData !== undefined) {
      queryParameters['withData'] = requestParameters.withData;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/export`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.BlobApiResponse(response);
  }

  /**
   * Export a document to a different format
   */
  async exportDocument(
    requestParameters: ExportDocumentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Blob> {
    const response = await this.exportDocumentRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Retrieve annotations of a document in a specific space
   */
  async getDocumentAnnotationsRaw(
    requestParameters: GetDocumentAnnotationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Annotation>>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling getDocumentAnnotations.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling getDocumentAnnotations.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/annotations`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(AnnotationFromJSON)
    );
  }

  /**
   * Retrieve annotations of a document in a specific space
   */
  async getDocumentAnnotations(
    requestParameters: GetDocumentAnnotationsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Annotation>> {
    const response = await this.getDocumentAnnotationsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Retrieve attributes of a document in a specific space
   */
  async getDocumentAttributesRaw(
    requestParameters: GetDocumentAttributesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<object>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling getDocumentAttributes.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling getDocumentAttributes.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/attributes`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Retrieve attributes of a document in a specific space
   */
  async getDocumentAttributes(
    requestParameters: GetDocumentAttributesRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<object> {
    const response = await this.getDocumentAttributesRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Serve document content from a space
   */
  async getDocumentContentRaw(
    requestParameters: GetDocumentContentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Blob>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling getDocumentContent.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling getDocumentContent.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/content`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.BlobApiResponse(response);
  }

  /**
   * Serve document content from a space
   */
  async getDocumentContent(
    requestParameters: GetDocumentContentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Blob> {
    const response = await this.getDocumentContentRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Retrieve tags of a document in a specific space
   */
  async getDocumentTagsRaw(
    requestParameters: GetDocumentTagsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<string>>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling getDocumentTags.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling getDocumentTags.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/tags`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   * Retrieve tags of a document in a specific space
   */
  async getDocumentTags(
    requestParameters: GetDocumentTagsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<string>> {
    const response = await this.getDocumentTagsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Import a document
   */
  async importDocumentRaw(
    requestParameters: ImportDocumentOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling importDocument.'
      );
    }

    if (
      requestParameters.importDocumentRequest === null ||
      requestParameters.importDocumentRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'importDocumentRequest',
        'Required parameter requestParameters.importDocumentRequest was null or undefined when calling importDocument.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/import`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ImportDocumentRequestToJSON(
          requestParameters.importDocumentRequest
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Import a document
   */
  async importDocument(
    requestParameters: ImportDocumentOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.importDocumentRaw(requestParameters, initOverrides);
  }

  /**
   * List all documents within a space or sub-folder
   */
  async listDocumentsRaw(
    requestParameters: ListDocumentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<ListDocuments200ResponseInner>>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling listDocuments.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling listDocuments.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    if (requestParameters.folderOnly !== undefined) {
      queryParameters['folderOnly'] = requestParameters.folderOnly;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/list`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(ListDocuments200ResponseInnerFromJSON)
    );
  }

  /**
   * List all documents within a space or sub-folder
   */
  async listDocuments(
    requestParameters: ListDocumentsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<ListDocuments200ResponseInner>> {
    const response = await this.listDocumentsRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Open a document with the system app
   */
  async openDocumentWithSystemAppRaw(
    requestParameters: OpenDocumentWithSystemAppRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling openDocumentWithSystemApp.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling openDocumentWithSystemApp.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/open`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Open a document with the system app
   */
  async openDocumentWithSystemApp(
    requestParameters: OpenDocumentWithSystemAppRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.openDocumentWithSystemAppRaw(requestParameters, initOverrides);
  }

  /**
   * Remove tags from a document in a specific space
   */
  async removeDocumentTagsRaw(
    requestParameters: RemoveDocumentTagsOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling removeDocumentTags.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling removeDocumentTags.'
      );
    }

    if (
      requestParameters.removeDocumentTagsRequest === null ||
      requestParameters.removeDocumentTagsRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'removeDocumentTagsRequest',
        'Required parameter requestParameters.removeDocumentTagsRequest was null or undefined when calling removeDocumentTags.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/tags`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
        body: RemoveDocumentTagsRequestToJSON(
          requestParameters.removeDocumentTagsRequest
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Remove tags from a document in a specific space
   */
  async removeDocumentTags(
    requestParameters: RemoveDocumentTagsOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.removeDocumentTagsRaw(requestParameters, initOverrides);
  }

  /**
   * Rename a document
   */
  async renameDocumentRaw(
    requestParameters: RenameDocumentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling renameDocument.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling renameDocument.'
      );
    }

    if (
      requestParameters.newName === null ||
      requestParameters.newName === undefined
    ) {
      throw new runtime.RequiredError(
        'newName',
        'Required parameter requestParameters.newName was null or undefined when calling renameDocument.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    if (requestParameters.newName !== undefined) {
      queryParameters['newName'] = requestParameters.newName;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/renameDocument`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Rename a document
   */
  async renameDocument(
    requestParameters: RenameDocumentRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.renameDocumentRaw(requestParameters, initOverrides);
  }

  /**
   * Rename a folder
   */
  async renameFolderRaw(
    requestParameters: RenameFolderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling renameFolder.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling renameFolder.'
      );
    }

    if (
      requestParameters.newName === null ||
      requestParameters.newName === undefined
    ) {
      throw new runtime.RequiredError(
        'newName',
        'Required parameter requestParameters.newName was null or undefined when calling renameFolder.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    if (requestParameters.newName !== undefined) {
      queryParameters['newName'] = requestParameters.newName;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/renameFolder`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Rename a folder
   */
  async renameFolder(
    requestParameters: RenameFolderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.renameFolderRaw(requestParameters, initOverrides);
  }

  /**
   * Update annotations of a document in a specific space
   */
  async updateDocumentAnnotationRaw(
    requestParameters: UpdateDocumentAnnotationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spaceKey === null ||
      requestParameters.spaceKey === undefined
    ) {
      throw new runtime.RequiredError(
        'spaceKey',
        'Required parameter requestParameters.spaceKey was null or undefined when calling updateDocumentAnnotation.'
      );
    }

    if (
      requestParameters.path === null ||
      requestParameters.path === undefined
    ) {
      throw new runtime.RequiredError(
        'path',
        'Required parameter requestParameters.path was null or undefined when calling updateDocumentAnnotation.'
      );
    }

    if (
      requestParameters.annotation === null ||
      requestParameters.annotation === undefined
    ) {
      throw new runtime.RequiredError(
        'annotation',
        'Required parameter requestParameters.annotation was null or undefined when calling updateDocumentAnnotation.'
      );
    }

    const queryParameters: any = {};

    if (requestParameters.path !== undefined) {
      queryParameters['path'] = requestParameters.path;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/documents/{spaceKey}/annotations`.replace(
          `{${'spaceKey'}}`,
          encodeURIComponent(String(requestParameters.spaceKey))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: AnnotationToJSON(requestParameters.annotation),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update annotations of a document in a specific space
   */
  async updateDocumentAnnotation(
    requestParameters: UpdateDocumentAnnotationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.updateDocumentAnnotationRaw(requestParameters, initOverrides);
  }
}

/**
 * @export
 */
export const ListDocumentsFolderOnlyEnum = {
  _0: '0',
  _1: '1',
} as const;
export type ListDocumentsFolderOnlyEnum =
  (typeof ListDocumentsFolderOnlyEnum)[keyof typeof ListDocumentsFolderOnlyEnum];
