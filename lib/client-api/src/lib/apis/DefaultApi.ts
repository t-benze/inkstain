/* tslint:disable */
/* eslint-disable */
/**
 * InkStain
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DocumentsListPathGet200ResponseInner,
} from '../models/index';
import {
    DocumentsListPathGet200ResponseInnerFromJSON,
    DocumentsListPathGet200ResponseInnerToJSON,
} from '../models/index';

export interface DocumentsContentPathGetRequest {
    path: string;
}

export interface DocumentsListPathGetRequest {
    path: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Serve the binary content of the document located at the given path.
     * Serve a document.
     */
    async documentsContentPathGetRaw(requestParameters: DocumentsContentPathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling documentsContentPathGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/documents/content/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Serve the binary content of the document located at the given path.
     * Serve a document.
     */
    async documentsContentPathGet(requestParameters: DocumentsContentPathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.documentsContentPathGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Recursively lists all documents and sub-folders within the specified path.
     * Lists documents and folders.
     */
    async documentsListPathGetRaw(requestParameters: DocumentsListPathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DocumentsListPathGet200ResponseInner>>> {
        if (requestParameters.path === null || requestParameters.path === undefined) {
            throw new runtime.RequiredError('path','Required parameter requestParameters.path was null or undefined when calling documentsListPathGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/documents/list/{path}`.replace(`{${"path"}}`, encodeURIComponent(String(requestParameters.path))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DocumentsListPathGet200ResponseInnerFromJSON));
    }

    /**
     * Recursively lists all documents and sub-folders within the specified path.
     * Lists documents and folders.
     */
    async documentsListPathGet(requestParameters: DocumentsListPathGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DocumentsListPathGet200ResponseInner>> {
        const response = await this.documentsListPathGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
