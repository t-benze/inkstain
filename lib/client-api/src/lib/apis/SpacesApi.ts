/* tslint:disable */
/* eslint-disable */
/**
 * InkStain
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  Space,
  SpacesKeyPutRequest,
  SpacesPostRequest,
} from '../models/index';
import {
  SpaceFromJSON,
  SpaceToJSON,
  SpacesKeyPutRequestFromJSON,
  SpacesKeyPutRequestToJSON,
  SpacesPostRequestFromJSON,
  SpacesPostRequestToJSON,
} from '../models/index';

export interface SpacesKeyDeleteRequest {
  key: string;
}

export interface SpacesKeyPutOperationRequest {
  key: string;
  spacesKeyPutRequest: SpacesKeyPutRequest;
}

export interface SpacesPostOperationRequest {
  spacesPostRequest: SpacesPostRequest;
}

/**
 *
 */
export class SpacesApi extends runtime.BaseAPI {
  /**
   * Get all spaces
   */
  async spacesGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Space>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/spaces`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(SpaceFromJSON)
    );
  }

  /**
   * Get all spaces
   */
  async spacesGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Space>> {
    const response = await this.spacesGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Delete an existing space
   */
  async spacesKeyDeleteRaw(
    requestParameters: SpacesKeyDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.key === null || requestParameters.key === undefined) {
      throw new runtime.RequiredError(
        'key',
        'Required parameter requestParameters.key was null or undefined when calling spacesKeyDelete.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/spaces/{key}`.replace(
          `{${'key'}}`,
          encodeURIComponent(String(requestParameters.key))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete an existing space
   */
  async spacesKeyDelete(
    requestParameters: SpacesKeyDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.spacesKeyDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * Update an existing space
   */
  async spacesKeyPutRaw(
    requestParameters: SpacesKeyPutOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.key === null || requestParameters.key === undefined) {
      throw new runtime.RequiredError(
        'key',
        'Required parameter requestParameters.key was null or undefined when calling spacesKeyPut.'
      );
    }

    if (
      requestParameters.spacesKeyPutRequest === null ||
      requestParameters.spacesKeyPutRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'spacesKeyPutRequest',
        'Required parameter requestParameters.spacesKeyPutRequest was null or undefined when calling spacesKeyPut.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/spaces/{key}`.replace(
          `{${'key'}}`,
          encodeURIComponent(String(requestParameters.key))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: SpacesKeyPutRequestToJSON(requestParameters.spacesKeyPutRequest),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update an existing space
   */
  async spacesKeyPut(
    requestParameters: SpacesKeyPutOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.spacesKeyPutRaw(requestParameters, initOverrides);
  }

  /**
   * Create a new space
   */
  async spacesPostRaw(
    requestParameters: SpacesPostOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spacesPostRequest === null ||
      requestParameters.spacesPostRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'spacesPostRequest',
        'Required parameter requestParameters.spacesPostRequest was null or undefined when calling spacesPost.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/spaces`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: SpacesPostRequestToJSON(requestParameters.spacesPostRequest),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Create a new space
   */
  async spacesPost(
    requestParameters: SpacesPostOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.spacesPostRaw(requestParameters, initOverrides);
  }
}
