/* tslint:disable */
/* eslint-disable */
/**
 * InkStain
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  Space,
  SpacesNamePutRequest,
  SpacesPostRequest,
} from '../models/index';
import {
  SpaceFromJSON,
  SpaceToJSON,
  SpacesNamePutRequestFromJSON,
  SpacesNamePutRequestToJSON,
  SpacesPostRequestFromJSON,
  SpacesPostRequestToJSON,
} from '../models/index';

export interface SpacesNameDeleteRequest {
  name: string;
}

export interface SpacesNamePutOperationRequest {
  name: string;
  spacesNamePutRequest: SpacesNamePutRequest;
}

export interface SpacesPostOperationRequest {
  spacesPostRequest: SpacesPostRequest;
}

/**
 *
 */
export class SpacesApi extends runtime.BaseAPI {
  /**
   * Get all spaces
   */
  async spacesGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<{ [key: string]: Space }>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/spaces`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      runtime.mapValues(jsonValue, SpaceFromJSON)
    );
  }

  /**
   * Get all spaces
   */
  async spacesGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<{ [key: string]: Space }> {
    const response = await this.spacesGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Delete an existing space
   */
  async spacesNameDeleteRaw(
    requestParameters: SpacesNameDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.name === null ||
      requestParameters.name === undefined
    ) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling spacesNameDelete.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/spaces/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete an existing space
   */
  async spacesNameDelete(
    requestParameters: SpacesNameDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.spacesNameDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * Update an existing space
   */
  async spacesNamePutRaw(
    requestParameters: SpacesNamePutOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.name === null ||
      requestParameters.name === undefined
    ) {
      throw new runtime.RequiredError(
        'name',
        'Required parameter requestParameters.name was null or undefined when calling spacesNamePut.'
      );
    }

    if (
      requestParameters.spacesNamePutRequest === null ||
      requestParameters.spacesNamePutRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'spacesNamePutRequest',
        'Required parameter requestParameters.spacesNamePutRequest was null or undefined when calling spacesNamePut.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/spaces/{name}`.replace(
          `{${'name'}}`,
          encodeURIComponent(String(requestParameters.name))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: SpacesNamePutRequestToJSON(
          requestParameters.spacesNamePutRequest
        ),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Update an existing space
   */
  async spacesNamePut(
    requestParameters: SpacesNamePutOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.spacesNamePutRaw(requestParameters, initOverrides);
  }

  /**
   * Create a new space
   */
  async spacesPostRaw(
    requestParameters: SpacesPostOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.spacesPostRequest === null ||
      requestParameters.spacesPostRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'spacesPostRequest',
        'Required parameter requestParameters.spacesPostRequest was null or undefined when calling spacesPost.'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/spaces`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: SpacesPostRequestToJSON(requestParameters.spacesPostRequest),
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Create a new space
   */
  async spacesPost(
    requestParameters: SpacesPostOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.spacesPostRaw(requestParameters, initOverrides);
  }
}
